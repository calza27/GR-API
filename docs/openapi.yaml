openapi: 3.0.0
x-explorer-enabled: false
info:
  title: Gift Registry API
  description: "A REST interface to manage Gift Registry related operations"
  contact: {}
  version: "1.0"
servers:
  - url: https://cxecixxpud.execute-api.ap-southeast-2.amazonaws.com/api
    description: Gift Registry dev server
x-amazon-apigateway-request-validators:
  basic:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: "400"
    responseTemplates:
      application/json: '{ "errors": [ { "detail": "$context.error.message: $context.error.validationErrorString" } ] }'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Cache-Control: "'no-store'"
      gatewayresponse.header.Content-Security-Policy: "'frame-ancestors 'none''"
      gatewayresponse.header.Strict-Transport-Security: "'max-age=31536000; includeSubDomains'"
      gatewayresponse.header.X-FRAME-OPTIONS: "'DENY'"
      gatewayresponse.header.X-Content-Type-Options: "'nosniff'"
  ACCESS_DENIED:
    statusCode: "403"
    responseTemplates:
      application/json: '{ "errors": [ { "detail": "Not authorized to access this resource" } ] }'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Cache-Control: "'no-store'"
      gatewayresponse.header.Content-Security-Policy: "'frame-ancestors 'none''"
      gatewayresponse.header.Strict-Transport-Security: "'max-age=31536000; includeSubDomains'"
      gatewayresponse.header.X-FRAME-OPTIONS: "'DENY'"
      gatewayresponse.header.X-Content-Type-Options: "'nosniff'"
paths:
  /list:
    post:
      summary: Add a new list for the auth'd user
      description: "Add a new list for the auth'd user"
      operationId: addList
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/list"
        required: true
      responses:
        "201":
          description: "Success"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      security:
        - CognitoPool: []
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/gift-registry/function/list/arn}}:live/invocations"
    get:
      summary: Get all lists for the auth'd user
      description: "Get all lists for the auth'd user"
      operationId: getListList
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/list"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      security:
        - CognitoPool: []
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/gift-registry/function/list/arn}}:live/invocations"
  /list/{list_id}:
    get:
      summary: Get a list
      description: "Get a list"
      operationId: getList
      parameters:
        - name: list_id
          in: path
          description: the ID of the list to get
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/list"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      security: []
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/gift-registry/function/list/arn}}:live/invocations"
    put:
      summary: Update a list
      description: "Update a list"
      operationId: updateList
      parameters:
        - name: list_id
          in: path
          description: the ID of the list to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/list"
        required: true
      responses:
        "201":
          description: "Success"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      security:
        - CognitoPool: []
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/gift-registry/function/list/arn}}:live/invocations"
    delete:
      summary: Delete a list
      description: "Delete a list"
      operationId: deleteList
      parameters:
        - name: list_id
          in: path
          description: the ID of the list to delete
          required: true
          schema:
            type: string
      responses:
        "201":
          description: "Success"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      security:
        - CognitoPool: []
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/gift-registry/function/list/arn}}:live/invocations"
  /list/{list_id}/gift:
    get:
      summary: Get gifts for a list
      description: "Get gifts for a list"
      operationId: getGiftList
      parameters:
        - name: list_id
          in: path
          description: the ID of the list to get the gifts for
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/gift"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      security: []
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/gift-registry/function/gift/arn}}:live/invocations"
    post:
      summary: Add a new gift to the given list
      description: "Add a new gift to the given list"
      operationId: addGift
      parameters:
        - name: list_id
          in: path
          description: the ID of the list to add the gift to
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/gift"
        required: true
      responses:
        "201":
          description: "Success"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      security:
        - CognitoPool: []
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/gift-registry/function/gift/arn}}:live/invocations"
  /list/{list_id}/gift/{gift_id}:
    get:
      summary: Get a gift associated with the given list
      description: "Get a gift associated with the given list"
      operationId: getGift
      parameters:
        - name: list_id
          in: path
          description: the ID of the list to get the gift from
          required: true
          schema:
            type: string
        - name: gift_id
          in: path
          description: the ID of the gift to get
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/gift"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      security: []
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/gift-registry/function/gift/arn}}:live/invocations"
    put:
      summary: Update a gift assoicated with a given list
      description: "Update a gift assoicated with a given list"
      operationId: updateGift
      parameters:
        - name: list_id
          in: path
          description: the ID of the list the gift is assocaited with
          required: true
          schema:
            type: string
        - name: gift_id
          in: path
          description: the ID of the gift to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/gift"
        required: true
      responses:
        "201":
          description: "Success"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      security:
        - CognitoPool: []
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/gift-registry/function/gift/arn}}:live/invocations"
    delete:
      summary: Remove a gift from a list
      description: "Remove a gift from a list"
      operationId: deleteGift
      parameters:
        - name: list_id
          in: path
          description: the ID of the list to remove the gift from
          required: true
          schema:
            type: string
        - name: gift_id
          in: path
          description: the ID of the gift to delete
          required: true
          schema:
            type: string
      responses:
        "201":
          description: "Success"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      security:
        - CognitoPool: []
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/gift-registry/function/gift/arn}}:live/invocations"
  /image:
    put:
      summary: Upload an image
      description: "Upload an image"
      operationId: uploadImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/imageData"
        required: true
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: string
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      security:
        - CognitoPool: []
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/gift-registry/function/image/arn}}:live/invocations"
  /image/{file_name}:
    get:
      summary: Get a presigned URL to the image
      description: "Get a presigned URL to the image"
      operationId: getImageUrl
      parameters:
        - name: file_name
          in: path
          description: the filename of the image to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: string
        "500":
          $ref: "#/components/responses/InternalServerError"
      deprecated: false
      security: []
      x-amazon-apigateway-request-validator: "basic"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:ssm:/gift-registry/function/image/arn}}:live/invocations"
components:
  securitySchemes:
    CognitoPool:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        type: "cognito_user_pools"
        providerARNs:
          - Fn::Sub: "{{resolve:ssm:/gift-registry/cognito/user-pool/arn}}"
  responses:
    NoContent:
      description: "No Content"
    BadRequest:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    NotFound:
      description: "Not Found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    Conflict:
      description: "Conflict"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    Unauthorized:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    Forbidden:
      description: "Forbidden"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    InternalServerError:
      description: "Internal Server Error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
  schemas:
    error:
      type: object
      properties:
        status:
          type: integer
          description: the HTTP status code
          example: 400
        message:
          type: string
          description: a human readable message
          example: "An error occured during [x]"
    list:
      title: List
      type: object
      properties:
        uuid:
          type: string
        user_id:
          type: string
        created_at:
          type: string
        name:
          type: string
        sharing_id:
          type: string
    gift:
      title: Gift
      type: object
      properties:
        uuid:
          type: string
        list_id:
          type: string
        created_at:
          type: string
        title:
          type: string
        description:
          type: string
        place_of_purchase:
          type: string
        image_file_name:
          type: string
        url:
          type: string
        price:
          type: number
        rank:
          type: number
    imageData:
      title: Image Data
      type: object
      properties:
        file_name:
          type: string
        file_data:
          type: string